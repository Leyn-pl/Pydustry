package mindustry.gen;

import java.nio.ByteBuffer;

/**
 * Autogenerated file. Do not modify!
 */
public class RemoteReadServer {
  public static void readPacket(ByteBuffer buffer, int id, mindustry.entities.type.Player player) {
    if(id == 2) {
      try {
        mindustry.core.NetServer.connectConfirm(player);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'connectConfirm'!", e);
      }
    } else if(id == 5) {
      try {
        float angle = buffer.getFloat();
        mindustry.input.InputHandler.dropItem(player, angle);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'dropItem'!", e);
      }
    } else if(id == 8) {
      try {
        mindustry.entities.type.Player other = mindustry.io.TypeIO.readPlayer(buffer);
        mindustry.net.Packets.AdminAction action = mindustry.io.TypeIO.readAction(buffer);
        mindustry.core.NetServer.onAdminRequest(player, other, action);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'onAdminRequest'!", e);
      }
    } else if(id == 10) {
      try {
        int snapshotID = buffer.getInt();
        float x = buffer.getFloat();
        float y = buffer.getFloat();
        float pointerX = buffer.getFloat();
        float pointerY = buffer.getFloat();
        float rotation = buffer.getFloat();
        float baseRotation = buffer.getFloat();
        float xVelocity = buffer.getFloat();
        float yVelocity = buffer.getFloat();
        mindustry.world.Tile mining = mindustry.io.TypeIO.readTile(buffer);
        boolean boosting = buffer.get() == 1;
        boolean shooting = buffer.get() == 1;
        boolean chatting = buffer.get() == 1;
        boolean building = buffer.get() == 1;
        mindustry.entities.traits.BuilderTrait.BuildRequest[] requests = mindustry.io.TypeIO.readRequests(buffer);
        float viewX = buffer.getFloat();
        float viewY = buffer.getFloat();
        float viewWidth = buffer.getFloat();
        float viewHeight = buffer.getFloat();
        mindustry.core.NetServer.onClientShapshot(player, snapshotID, x, y, pointerX, pointerY, rotation, baseRotation, xVelocity, yVelocity, mining, boosting, shooting, chatting, building, requests, viewX, viewY, viewWidth, viewHeight);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'onClientShapshot'!", e);
      }
    } else if(id == 27) {
      try {
        mindustry.world.Tile tile = mindustry.io.TypeIO.readTile(buffer);
        mindustry.world.blocks.units.MechPad.onMechFactoryTap(player, tile);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'onMechFactoryTap'!", e);
      }
    } else if(id == 28) {
      try {
        long time = buffer.getLong();
        mindustry.core.NetClient.onPing(player, time);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'onPing'!", e);
      }
    } else if(id == 38) {
      try {
        mindustry.world.Tile tile = mindustry.io.TypeIO.readTile(buffer);
        int value = buffer.getInt();
        mindustry.input.InputHandler.onTileConfig(player, tile, value);
        mindustry.gen.Call.onTileConfig__forward(player.con, player, tile, value);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'onTileConfig'!", e);
      }
    } else if(id == 41) {
      try {
        mindustry.world.Tile tile = mindustry.io.TypeIO.readTile(buffer);
        mindustry.input.InputHandler.onTileTapped(player, tile);
        mindustry.gen.Call.onTileTapped__forward(player.con, player, tile);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'onTileTapped'!", e);
      }
    } else if(id == 49) {
      try {
        mindustry.entities.type.BaseUnit unit = mindustry.io.TypeIO.readBaseUnit(buffer);
        mindustry.ui.fragments.HudFragment.removeUnitEditor(player, unit);
        mindustry.gen.Call.removeUnitEditor__forward(player.con, player, unit);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'removeUnitEditor'!", e);
      }
    } else if(id == 50) {
      try {
        mindustry.world.Tile tile = mindustry.io.TypeIO.readTile(buffer);
        mindustry.type.Item item = mindustry.io.TypeIO.readItem(buffer);
        int amount = buffer.getInt();
        mindustry.ui.fragments.BlockInventoryFragment.requestItem(player, tile, item, amount);
        mindustry.gen.Call.requestItem__forward(player.con, player, tile, item, amount);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'requestItem'!", e);
      }
    } else if(id == 51) {
      try {
        mindustry.world.Tile tile = mindustry.io.TypeIO.readTile(buffer);
        boolean direction = buffer.get() == 1;
        mindustry.input.InputHandler.rotateBlock(player, tile, direction);
        mindustry.gen.Call.rotateBlock__forward(player.con, player, tile, direction);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'rotateBlock'!", e);
      }
    } else if(id == 52) {
      try {
        java.lang.String message = mindustry.io.TypeIO.readString(buffer);
        mindustry.core.NetClient.sendChatMessage(player, message);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'sendChatMessage'!", e);
      }
    } else if(id == 57) {
      try {
        mindustry.world.Tile tile = mindustry.io.TypeIO.readTile(buffer);
        java.lang.String text = mindustry.io.TypeIO.readString(buffer);
        mindustry.world.blocks.logic.MessageBlock.setMessageBlockText(player, tile, text);
        mindustry.gen.Call.setMessageBlockText__forward(player.con, player, tile, text);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'setMessageBlockText'!", e);
      }
    } else if(id == 58) {
      try {
        mindustry.game.Team team = mindustry.io.TypeIO.readTeam(buffer);
        mindustry.ui.fragments.HudFragment.setPlayerTeamEditor(player, team);
        mindustry.gen.Call.setPlayerTeamEditor__forward(player.con, player, team);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'setPlayerTeamEditor'!", e);
      }
    } else if(id == 60) {
      try {
        mindustry.type.UnitType type = mindustry.io.TypeIO.readUnitType(buffer);
        mindustry.ui.fragments.HudFragment.spawnUnitEditor(player, type);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'spawnUnitEditor'!", e);
      }
    } else if(id == 61) {
      try {
        mindustry.world.Tile tile = mindustry.io.TypeIO.readTile(buffer);
        mindustry.input.InputHandler.transferInventory(player, tile);
        mindustry.gen.Call.transferInventory__forward(player.con, player, tile);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to to read remote method 'transferInventory'!", e);
      }
    } else {
      throw new java.lang.RuntimeException("Invalid read method ID: " + id + "");
    }
  }
}
