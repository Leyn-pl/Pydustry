package mindustry.gen;

import arc.Settings;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.lang.SuppressWarnings;
import mindustry.game.Rules;
import mindustry.game.Stats;
import mindustry.net.Administration;
import mindustry.ui.dialogs.JoinDialog;

/**
 * Autogenerated file. Do not modify!
 */
@SuppressWarnings("unchecked")
public class Serialization {
  static {
    Injector.ii();}

  public static void writeRules(DataOutput stream, Rules object) throws IOException {
    stream.writeBoolean(object.infiniteResources);
    stream.writeBoolean(object.waveTimer);
    stream.writeBoolean(object.waves);
    stream.writeBoolean(object.enemyCheat);
    stream.writeBoolean(object.pvp);
    stream.writeBoolean(object.unitDrops);
    stream.writeBoolean(object.reactorExplosions);
    stream.writeFloat(object.unitBuildSpeedMultiplier);
    stream.writeFloat(object.unitHealthMultiplier);
    stream.writeFloat(object.playerHealthMultiplier);
    stream.writeFloat(object.blockHealthMultiplier);
    stream.writeFloat(object.playerDamageMultiplier);
    stream.writeFloat(object.unitDamageMultiplier);
    stream.writeFloat(object.buildCostMultiplier);
    stream.writeFloat(object.buildSpeedMultiplier);
    stream.writeFloat(object.deconstructRefundMultiplier);
    stream.writeFloat(object.enemyCoreBuildRadius);
    stream.writeFloat(object.dropZoneRadius);
    stream.writeFloat(object.respawnTime);
    stream.writeFloat(object.waveSpacing);
    stream.writeFloat(object.bossWaveMultiplier);
    stream.writeFloat(object.launchWaveMultiplier);
    arc.Core.settings.getSerializer(mindustry.type.Zone.class).write(stream, object.zone);
    arc.Core.settings.getSerializer(arc.struct.Array.class).write(stream, object.spawns);
    stream.writeBoolean(object.limitedRespawns);
    stream.writeInt(object.respawns);
    stream.writeBoolean(object.waitForWaveToEnd);
    stream.writeBoolean(object.attackMode);
    stream.writeBoolean(object.editor);
    stream.writeBoolean(object.tutorial);
    stream.writeBoolean(object.canGameOver);
    arc.Core.settings.getSerializer(arc.struct.Array.class).write(stream, object.loadout);
    arc.Core.settings.getSerializer(arc.struct.ObjectSet.class).write(stream, object.bannedBlocks);
    stream.writeBoolean(object.lighting);
    arc.Core.settings.getSerializer(arc.graphics.Color.class).write(stream, object.ambientLight);
    stream.writeFloat(object.solarPowerMultiplier);
    arc.Core.settings.getSerializer(mindustry.game.Team.class).write(stream, object.defaultTeam);
    arc.Core.settings.getSerializer(mindustry.game.Team.class).write(stream, object.waveTeam);
    arc.Core.settings.getSerializer(arc.struct.StringMap.class).write(stream, object.tags);
  }

  public static Rules readRules(DataInput stream) throws IOException {
    mindustry.game.Rules object = new mindustry.game.Rules();
    object.infiniteResources= stream.readBoolean();
    object.waveTimer= stream.readBoolean();
    object.waves= stream.readBoolean();
    object.enemyCheat= stream.readBoolean();
    object.pvp= stream.readBoolean();
    object.unitDrops= stream.readBoolean();
    object.reactorExplosions= stream.readBoolean();
    object.unitBuildSpeedMultiplier= stream.readFloat();
    object.unitHealthMultiplier= stream.readFloat();
    object.playerHealthMultiplier= stream.readFloat();
    object.blockHealthMultiplier= stream.readFloat();
    object.playerDamageMultiplier= stream.readFloat();
    object.unitDamageMultiplier= stream.readFloat();
    object.buildCostMultiplier= stream.readFloat();
    object.buildSpeedMultiplier= stream.readFloat();
    object.deconstructRefundMultiplier= stream.readFloat();
    object.enemyCoreBuildRadius= stream.readFloat();
    object.dropZoneRadius= stream.readFloat();
    object.respawnTime= stream.readFloat();
    object.waveSpacing= stream.readFloat();
    object.bossWaveMultiplier= stream.readFloat();
    object.launchWaveMultiplier= stream.readFloat();
    object.zone = (mindustry.type.Zone)arc.Core.settings.getSerializer(mindustry.type.Zone.class).read(stream);
    object.spawns = (arc.struct.Array)arc.Core.settings.getSerializer(arc.struct.Array.class).read(stream);
    object.limitedRespawns= stream.readBoolean();
    object.respawns= stream.readInt();
    object.waitForWaveToEnd= stream.readBoolean();
    object.attackMode= stream.readBoolean();
    object.editor= stream.readBoolean();
    object.tutorial= stream.readBoolean();
    object.canGameOver= stream.readBoolean();
    object.loadout = (arc.struct.Array)arc.Core.settings.getSerializer(arc.struct.Array.class).read(stream);
    object.bannedBlocks = (arc.struct.ObjectSet)arc.Core.settings.getSerializer(arc.struct.ObjectSet.class).read(stream);
    object.lighting= stream.readBoolean();
    object.ambientLight = (arc.graphics.Color)arc.Core.settings.getSerializer(arc.graphics.Color.class).read(stream);
    object.solarPowerMultiplier= stream.readFloat();
    object.defaultTeam = (mindustry.game.Team)arc.Core.settings.getSerializer(mindustry.game.Team.class).read(stream);
    object.waveTeam = (mindustry.game.Team)arc.Core.settings.getSerializer(mindustry.game.Team.class).read(stream);
    object.tags = (arc.struct.StringMap)arc.Core.settings.getSerializer(arc.struct.StringMap.class).read(stream);
    return object;
  }

  public static void writeStats(DataOutput stream, Stats object) throws IOException {
    arc.Core.settings.getSerializer(arc.struct.ObjectIntMap.class).write(stream, object.itemsDelivered);
    stream.writeInt(object.enemyUnitsDestroyed);
    stream.writeInt(object.wavesLasted);
    stream.writeLong(object.timeLasted);
    stream.writeInt(object.buildingsBuilt);
    stream.writeInt(object.buildingsDeconstructed);
    stream.writeInt(object.buildingsDestroyed);
  }

  public static Stats readStats(DataInput stream) throws IOException {
    mindustry.game.Stats object = new mindustry.game.Stats();
    object.itemsDelivered = (arc.struct.ObjectIntMap)arc.Core.settings.getSerializer(arc.struct.ObjectIntMap.class).read(stream);
    object.enemyUnitsDestroyed= stream.readInt();
    object.wavesLasted= stream.readInt();
    object.timeLasted= stream.readLong();
    object.buildingsBuilt= stream.readInt();
    object.buildingsDeconstructed= stream.readInt();
    object.buildingsDestroyed= stream.readInt();
    return object;
  }

  public static void writePlayerInfo(DataOutput stream, Administration.PlayerInfo object) throws
      IOException {
    arc.Core.settings.getSerializer(java.lang.String.class).write(stream, object.id);
    arc.Core.settings.getSerializer(java.lang.String.class).write(stream, object.lastName);
    arc.Core.settings.getSerializer(java.lang.String.class).write(stream, object.lastIP);
    arc.Core.settings.getSerializer(arc.struct.Array.class).write(stream, object.ips);
    arc.Core.settings.getSerializer(arc.struct.Array.class).write(stream, object.names);
    arc.Core.settings.getSerializer(java.lang.String.class).write(stream, object.adminUsid);
    stream.writeInt(object.timesKicked);
    stream.writeInt(object.timesJoined);
    stream.writeBoolean(object.banned);
    stream.writeBoolean(object.admin);
    stream.writeLong(object.lastKicked);
  }

  public static Administration.PlayerInfo readPlayerInfo(DataInput stream) throws IOException {
    mindustry.net.Administration.PlayerInfo object = new mindustry.net.Administration.PlayerInfo();
    object.id = (java.lang.String)arc.Core.settings.getSerializer(java.lang.String.class).read(stream);
    object.lastName = (java.lang.String)arc.Core.settings.getSerializer(java.lang.String.class).read(stream);
    object.lastIP = (java.lang.String)arc.Core.settings.getSerializer(java.lang.String.class).read(stream);
    object.ips = (arc.struct.Array)arc.Core.settings.getSerializer(arc.struct.Array.class).read(stream);
    object.names = (arc.struct.Array)arc.Core.settings.getSerializer(arc.struct.Array.class).read(stream);
    object.adminUsid = (java.lang.String)arc.Core.settings.getSerializer(java.lang.String.class).read(stream);
    object.timesKicked= stream.readInt();
    object.timesJoined= stream.readInt();
    object.banned= stream.readBoolean();
    object.admin= stream.readBoolean();
    object.lastKicked= stream.readLong();
    return object;
  }

  public static void writeServer(DataOutput stream, JoinDialog.Server object) throws IOException {
    arc.Core.settings.getSerializer(java.lang.String.class).write(stream, object.ip);
    stream.writeInt(object.port);
  }

  public static JoinDialog.Server readServer(DataInput stream) throws IOException {
    mindustry.ui.dialogs.JoinDialog.Server object = new mindustry.ui.dialogs.JoinDialog.Server();
    object.ip = (java.lang.String)arc.Core.settings.getSerializer(java.lang.String.class).read(stream);
    object.port= stream.readInt();
    return object;
  }

  public static void init() {
    arc.Core.settings.setSerializer(mindustry.game.Rules.class, new Settings.TypeSerializer<Rules>() {
      public void write(DataOutput stream, Rules object) throws IOException {
        stream.writeBoolean(object.infiniteResources);
        stream.writeBoolean(object.waveTimer);
        stream.writeBoolean(object.waves);
        stream.writeBoolean(object.enemyCheat);
        stream.writeBoolean(object.pvp);
        stream.writeBoolean(object.unitDrops);
        stream.writeBoolean(object.reactorExplosions);
        stream.writeFloat(object.unitBuildSpeedMultiplier);
        stream.writeFloat(object.unitHealthMultiplier);
        stream.writeFloat(object.playerHealthMultiplier);
        stream.writeFloat(object.blockHealthMultiplier);
        stream.writeFloat(object.playerDamageMultiplier);
        stream.writeFloat(object.unitDamageMultiplier);
        stream.writeFloat(object.buildCostMultiplier);
        stream.writeFloat(object.buildSpeedMultiplier);
        stream.writeFloat(object.deconstructRefundMultiplier);
        stream.writeFloat(object.enemyCoreBuildRadius);
        stream.writeFloat(object.dropZoneRadius);
        stream.writeFloat(object.respawnTime);
        stream.writeFloat(object.waveSpacing);
        stream.writeFloat(object.bossWaveMultiplier);
        stream.writeFloat(object.launchWaveMultiplier);
        arc.Core.settings.getSerializer(mindustry.type.Zone.class).write(stream, object.zone);
        arc.Core.settings.getSerializer(arc.struct.Array.class).write(stream, object.spawns);
        stream.writeBoolean(object.limitedRespawns);
        stream.writeInt(object.respawns);
        stream.writeBoolean(object.waitForWaveToEnd);
        stream.writeBoolean(object.attackMode);
        stream.writeBoolean(object.editor);
        stream.writeBoolean(object.tutorial);
        stream.writeBoolean(object.canGameOver);
        arc.Core.settings.getSerializer(arc.struct.Array.class).write(stream, object.loadout);
        arc.Core.settings.getSerializer(arc.struct.ObjectSet.class).write(stream, object.bannedBlocks);
        stream.writeBoolean(object.lighting);
        arc.Core.settings.getSerializer(arc.graphics.Color.class).write(stream, object.ambientLight);
        stream.writeFloat(object.solarPowerMultiplier);
        arc.Core.settings.getSerializer(mindustry.game.Team.class).write(stream, object.defaultTeam);
        arc.Core.settings.getSerializer(mindustry.game.Team.class).write(stream, object.waveTeam);
        arc.Core.settings.getSerializer(arc.struct.StringMap.class).write(stream, object.tags);
      }

      public Rules read(DataInput stream) throws IOException {
        mindustry.game.Rules object = new mindustry.game.Rules();
        object.infiniteResources= stream.readBoolean();
        object.waveTimer= stream.readBoolean();
        object.waves= stream.readBoolean();
        object.enemyCheat= stream.readBoolean();
        object.pvp= stream.readBoolean();
        object.unitDrops= stream.readBoolean();
        object.reactorExplosions= stream.readBoolean();
        object.unitBuildSpeedMultiplier= stream.readFloat();
        object.unitHealthMultiplier= stream.readFloat();
        object.playerHealthMultiplier= stream.readFloat();
        object.blockHealthMultiplier= stream.readFloat();
        object.playerDamageMultiplier= stream.readFloat();
        object.unitDamageMultiplier= stream.readFloat();
        object.buildCostMultiplier= stream.readFloat();
        object.buildSpeedMultiplier= stream.readFloat();
        object.deconstructRefundMultiplier= stream.readFloat();
        object.enemyCoreBuildRadius= stream.readFloat();
        object.dropZoneRadius= stream.readFloat();
        object.respawnTime= stream.readFloat();
        object.waveSpacing= stream.readFloat();
        object.bossWaveMultiplier= stream.readFloat();
        object.launchWaveMultiplier= stream.readFloat();
        object.zone = (mindustry.type.Zone)arc.Core.settings.getSerializer(mindustry.type.Zone.class).read(stream);
        object.spawns = (arc.struct.Array)arc.Core.settings.getSerializer(arc.struct.Array.class).read(stream);
        object.limitedRespawns= stream.readBoolean();
        object.respawns= stream.readInt();
        object.waitForWaveToEnd= stream.readBoolean();
        object.attackMode= stream.readBoolean();
        object.editor= stream.readBoolean();
        object.tutorial= stream.readBoolean();
        object.canGameOver= stream.readBoolean();
        object.loadout = (arc.struct.Array)arc.Core.settings.getSerializer(arc.struct.Array.class).read(stream);
        object.bannedBlocks = (arc.struct.ObjectSet)arc.Core.settings.getSerializer(arc.struct.ObjectSet.class).read(stream);
        object.lighting= stream.readBoolean();
        object.ambientLight = (arc.graphics.Color)arc.Core.settings.getSerializer(arc.graphics.Color.class).read(stream);
        object.solarPowerMultiplier= stream.readFloat();
        object.defaultTeam = (mindustry.game.Team)arc.Core.settings.getSerializer(mindustry.game.Team.class).read(stream);
        object.waveTeam = (mindustry.game.Team)arc.Core.settings.getSerializer(mindustry.game.Team.class).read(stream);
        object.tags = (arc.struct.StringMap)arc.Core.settings.getSerializer(arc.struct.StringMap.class).read(stream);
        return object;
      }
    });
    arc.Core.settings.setSerializer(mindustry.game.Stats.class, new Settings.TypeSerializer<Stats>() {
      public void write(DataOutput stream, Stats object) throws IOException {
        arc.Core.settings.getSerializer(arc.struct.ObjectIntMap.class).write(stream, object.itemsDelivered);
        stream.writeInt(object.enemyUnitsDestroyed);
        stream.writeInt(object.wavesLasted);
        stream.writeLong(object.timeLasted);
        stream.writeInt(object.buildingsBuilt);
        stream.writeInt(object.buildingsDeconstructed);
        stream.writeInt(object.buildingsDestroyed);
      }

      public Stats read(DataInput stream) throws IOException {
        mindustry.game.Stats object = new mindustry.game.Stats();
        object.itemsDelivered = (arc.struct.ObjectIntMap)arc.Core.settings.getSerializer(arc.struct.ObjectIntMap.class).read(stream);
        object.enemyUnitsDestroyed= stream.readInt();
        object.wavesLasted= stream.readInt();
        object.timeLasted= stream.readLong();
        object.buildingsBuilt= stream.readInt();
        object.buildingsDeconstructed= stream.readInt();
        object.buildingsDestroyed= stream.readInt();
        return object;
      }
    });
    arc.Core.settings.setSerializer(mindustry.net.Administration.PlayerInfo.class, new Settings.TypeSerializer<Administration.PlayerInfo>() {
      public void write(DataOutput stream, Administration.PlayerInfo object) throws IOException {
        arc.Core.settings.getSerializer(java.lang.String.class).write(stream, object.id);
        arc.Core.settings.getSerializer(java.lang.String.class).write(stream, object.lastName);
        arc.Core.settings.getSerializer(java.lang.String.class).write(stream, object.lastIP);
        arc.Core.settings.getSerializer(arc.struct.Array.class).write(stream, object.ips);
        arc.Core.settings.getSerializer(arc.struct.Array.class).write(stream, object.names);
        arc.Core.settings.getSerializer(java.lang.String.class).write(stream, object.adminUsid);
        stream.writeInt(object.timesKicked);
        stream.writeInt(object.timesJoined);
        stream.writeBoolean(object.banned);
        stream.writeBoolean(object.admin);
        stream.writeLong(object.lastKicked);
      }

      public Administration.PlayerInfo read(DataInput stream) throws IOException {
        mindustry.net.Administration.PlayerInfo object = new mindustry.net.Administration.PlayerInfo();
        object.id = (java.lang.String)arc.Core.settings.getSerializer(java.lang.String.class).read(stream);
        object.lastName = (java.lang.String)arc.Core.settings.getSerializer(java.lang.String.class).read(stream);
        object.lastIP = (java.lang.String)arc.Core.settings.getSerializer(java.lang.String.class).read(stream);
        object.ips = (arc.struct.Array)arc.Core.settings.getSerializer(arc.struct.Array.class).read(stream);
        object.names = (arc.struct.Array)arc.Core.settings.getSerializer(arc.struct.Array.class).read(stream);
        object.adminUsid = (java.lang.String)arc.Core.settings.getSerializer(java.lang.String.class).read(stream);
        object.timesKicked= stream.readInt();
        object.timesJoined= stream.readInt();
        object.banned= stream.readBoolean();
        object.admin= stream.readBoolean();
        object.lastKicked= stream.readLong();
        return object;
      }
    });
    arc.Core.settings.setSerializer(mindustry.ui.dialogs.JoinDialog.Server.class, new Settings.TypeSerializer<JoinDialog.Server>() {
      public void write(DataOutput stream, JoinDialog.Server object) throws IOException {
        arc.Core.settings.getSerializer(java.lang.String.class).write(stream, object.ip);
        stream.writeInt(object.port);
      }

      public JoinDialog.Server read(DataInput stream) throws IOException {
        mindustry.ui.dialogs.JoinDialog.Server object = new mindustry.ui.dialogs.JoinDialog.Server();
        object.ip = (java.lang.String)arc.Core.settings.getSerializer(java.lang.String.class).read(stream);
        object.port= stream.readInt();
        return object;
      }
    });
  }
}
